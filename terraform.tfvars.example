# AWS Region to deploy resources
region = "us-esat-1"

# Default tags for all resources
default_tags = {
  Environment = "demo"
  Project     = "eks-karpenter-example"
  Terraform   = "true"
}

# VPC Configuration
vpc = {
  name                    = "vpc"
  cidr                    = "10.20.0.0/17"
  enable_nat_gateway      = false
  single_nat_gateway      = true
  one_nat_gateway_per_az  = false
  public_subnets          = ["10.20.0.0/24", "10.20.1.0/24", "10.20.2.0/24"]
  private_subnets         = ["10.20.4.0/22", "10.20.8.0/22", "10.20.12.0/22"]
  enable_dns_hostnames    = true
  enable_dns_support      = true
}

# EKS Cluster Configuration
eks = {
  # Cluster basic settings
  cluster_name    = "eks-karpenter-demo" # Kubernetes cluster name
  cluster_version = "1.32"               # Kubernetes version

  # Cluster endpoint access configuration
  cluster_endpoint_public_access       = true          # Whether the cluster API server is accessible from the internet
  cluster_endpoint_public_access_cidrs = ["0.0.0.0/0"] # List of CIDR blocks that can access the cluster API server

  # EKS Managed Node Groups configuration
  managed_node_groups = {
    system = {
      name           = "eks-system"              # Name of the node group
      instance_types = ["t4g.small"]             # List of EC2 instance types to use
      ami_type       = "AL2023_ARM_64_STANDARD"  # AMI type (AL2023_x86_64_STANDARD, AL2023_ARM_64_STANDARD, etc.)
      min_size       = 1                         # Minimum number of nodes
      max_size       = 3                         # Maximum number of nodes
      desired_size   = 2                         # Desired number of nodes
      capacity_type  = "ON_DEMAND"               # Capacity type (ON_DEMAND or SPOT)

      lifecycle = {
        create_before_destroy = true # Create new resources before destroying old ones
      }
    }
  }

  # Default settings for all managed node groups
  managed_node_group_defaults = {
    ami_type       = "AL20232023_ARM_64"  # Default AMI type
    instance_types = ["t4g.small"]        # Default instance types
    disk_size      = 20                   # Root volume size in GB
  }
}

# Karpenter Configuration
karpenter = {
  version = "v1.3.1" # Karpenter version to deploy

  ec2_node_classes = {
    default = {
      name = "default"

      # Karpenter AMI configuration  
      ami_family               = "AL2023"
      ami_selector_terms_alias = "al2023@latest"

      disk_size = "20Gi"
      
      # Discovery settings
      use_subnet_discovery         = true
      use_security_group_discovery = true
    }
  }


  # Node pool configurations
  node_pools = {
    # x86 node pool
    x86 = {
      name = "default-x86" # Name of the node pool
      ec2_node_class_ref = "default" # Reference to EC2NodeClass name
      instance_types = [   # List of instance types to use
        "t3.small", "t3a.small",
        "t3.medium", "t3a.medium",
        # x86 instances
        "m5.medium", "m5.large", "m5.xlarge",
        "c5.medium", "c5.large", "c5.xlarge",
        "r5.medium", "r5.large", "r5.xlarge",
        # Latest x86 instances
        "m6i.medium", "m6i.large", "m6i.xlarge",
        "c6i.medium", "c6i.large", "c6i.xlarge",
        "r6i.medium", "r6i.large", "r6i.xlarge"
      ]
      capacity_types            = ["spot"] # ["spot", "on-demand"] Use spot instances for cost optimization
      architecture              = "amd64"  # x86_64 architecture
      os                        = "linux"  # Operating system
      ttl_seconds_after_empty   = 30       # Time to wait before terminating empty nodes
      ttl_seconds_until_expired = 2592000  # Node lifetime (30 days)
      labels = {
        "kubernetes.io/arch"         = "amd64"     # Architecture label
        "node-type"                  = "x86"       # Custom node type label
        "karpenter.sh/capacity-type" = "spot"      # Capacity type label
        "nodeManager"                = "karpenter" # Node manager label
      }
    },

    # ARM node pool
    arm = {
      name               = "default-arm" # Name of the node pool
      ec2_node_class_ref = "default" # Reference to EC2NodeClass name
      instance_types = [   # List of instance types to use
        "t4g.small", "t4g.medium",
        # Graviton2 instances
        "m6g.medium", "m6g.large", "m6g.xlarge",
        "c6g.medium", "c6g.large", "c6g.xlarge",
        "r6g.medium", "r6g.large", "r6g.xlarge",
        # Graviton3 instances
        "m7g.medium", "m7g.large", "m7g.xlarge",
        "c7g.medium", "c7g.large", "c7g.xlarge",
        "r7g.medium", "r7g.large", "r7g.xlarge",
        # Graviton4 instances
        "m8g.medium", "m8g.large", "m8g.xlarge",
        "c8g.medium", "c8g.large", "c8g.xlarge",
        "r8g.medium", "r8g.large", "r8g.xlarge",
        "x8g.medium", "x8g.large", "x8g.xlarge"
      ]
      capacity_types            = ["spot"] # ["spot", "on-demand"] Use spot instances for cost optimization
      architecture              = "arm64"  # ARM64 architecture
      os                        = "linux"  # Operating system
      ttl_seconds_after_empty   = 30       # Time to wait before terminating empty nodes
      ttl_seconds_until_expired = 2592000  # Node lifetime (30 days)
      labels = {
        "kubernetes.io/arch"         = "arm64"     # Architecture label
        "node-type"                  = "arm"       # Custom node type label
        "karpenter.sh/capacity-type" = "spot"      # Capacity type label
        "nodeManager"                = "karpenter" # Node manager label
      }
    }
  }
}
